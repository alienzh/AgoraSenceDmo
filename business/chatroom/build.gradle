if (isChatroomModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-kapt'
//plugins {
//    id 'com.android.library'
//    id 'org.jetbrains.kotlin.android'
//}

def dep = rootProject.ext.dependencies
def androidVersion = rootProject.ext.android

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def final TEST_RTC_APP_ID = properties.getProperty('AGORA_APP_ID_TEST')
def final TEST_RTC_APP_TOKEN = properties.getProperty('AGORA_APP_TOKEN_TSET')
def final TEST_IM_APP_KEY = properties.getProperty('IM_APP_KEY_TEST')
def final TEST_APP_SERVER_HOST = properties.getProperty('IM_APP_HOST_TEST')
def final RELEASE_RTC_APP_ID = properties.getProperty('AGORA_APP_ID_RELEASE')
def final RELEASE_RTC_APP_TOKEN = properties.getProperty('AGORA_APP_TOKEN_RELEASE')
def final RELEASE_IM_APP_KEY = properties.getProperty('IM_APP_KEY_RELEASE')
def final RELEASE__APP_SERVER_HOST = properties.getProperty('IM_APP_HOST_RELEASE')

android {
    compileSdk androidVersion["compileSdkVersion"]

    defaultConfig {
        minSdk androidVersion["minSdkVersion"]
        targetSdk androidVersion["targetSdkVersion"]
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
        if (isBuildTypesTest.toBoolean()){
            buildConfigField "String", "agora_app_id", "${TEST_RTC_APP_ID}"
            buildConfigField "String", "agora_app_token", "${TEST_RTC_APP_TOKEN}"
            buildConfigField "String", "im_app_key", "${TEST_IM_APP_KEY}"
            buildConfigField "String", "server_host", "${TEST_APP_SERVER_HOST}"
        }else {
            buildConfigField "String", "agora_app_id", "${RELEASE_RTC_APP_ID}"
            buildConfigField "String", "agora_app_token", "${RELEASE_RTC_APP_TOKEN}"
            buildConfigField "String", "im_app_key", "${RELEASE_IM_APP_KEY}"
            buildConfigField "String", "server_host", "${RELEASE__APP_SERVER_HOST}"
        }

        ndk {
            // 设置支持的SO库架构
            abiFilters 'arm64-v8a' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }
    sourceSets {
        main {
            // 独立调试与集成调试时使用不同的 AndroidManifest.xml 文件
            if (isChatroomModule.toBoolean()) {
                manifest.srcFile 'src/main/moduleManifest/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding true
    }
    dataBinding{
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    api dep["core-ktx"]
    api dep["appcompat"]
    api dep["constraintlayout"]
    api dep["recyclerview"]
    api dep["material"]
    api project(':SVGAPlayer')
    api dep["bugly"]

    testImplementation dep["junit"]
    androidTestImplementation dep["junit-android"]
    androidTestImplementation dep["espresso-core"]

    if (isChatroomModule.toBoolean()) {
        implementation project(":basicsdepend")
        implementation dep["navigation-fragment-ktx"]
        implementation dep["navigation-ui-ktx"]
        implementation dep["lifecycle-viewmodel-ktx"]
        implementation dep["lifecycle-livedata-ktx"]
        implementation dep["lifecycle-runtime-ktx"]
        implementation dep["annotation"]
        implementation dep["gson"]
        implementation dep["okhttp"]
        // glide
        implementation dep["glide"]
        annotationProcessor dep["glide-compiler"]
        implementation dep["arouter-api"]
        kapt dep["arouter-compiler"]
        implementation dep["easypermissions"]
        compileOnly project(':component:imkit')
    } else {
        compileOnly project(':common:buddy')
        compileOnly project(':common:baseui')
        compileOnly project(':common:config')
        compileOnly project(':common:network')
        compileOnly project(':component:secnceui')
    }
}